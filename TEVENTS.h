#ifndef _H_EVENTS_OBJECTS_H_
#define _H_EVENTS_OBJECTS_H_


#include <stdint.h>

enum EEVSTATUS {EEVSTATUS_OK = 0, EEVSTATUS_ERROR = 1, EEVSTATUS_TIMEOUT = 2, EEVSTATUS_ENDENUM};

// интерфейс вызова event cb для класса управляющего асинхронными процессами
// управляющий класс должен наследоваться от этого интерфейса
class IEVCB {
	public:
		virtual void events_cb (uint32_t ev_code, EEVSTATUS st, uint32_t param) = 0;
};



// Event обьект: ссылка или указатель этого обьекта передаетсЯ в периферийный класс.
// Периферийный класс в протитипе функции получает ссылку или указатель на этот обьект, хранит его указатель. После выполнения своих внутрених действия, периферийный класс
// вызывает метод call_bc один раз и передает туда статус выполненной операции. 
// Периферийный класс должен в любом случае вызвать метод call_bc. 
class TEVENT {
	protected:
		bool f_event_progress;
		IEVCB *obj_cb;
		uint32_t ev_code;
		uint32_t ev_param;
		TEVENT ();
	public:
		void call_bc (EEVSTATUS st);	// этот метод запускает периферийный класс после выполнениЯ поставленой задачи
};




// Обьект TEVENTCREATE инициализации параметров TEVENT, создается и хранится в управляющем классе, неопределенное количество времени.
// Управляющий класс может использовать этот обьект повторно для других вызовов
// Недопускается переинициализировать параметры TEVENT, когда сам TEVENT уже передан периферийному классу, для этого можно воспользоваться проверкой is_progress ()
// Деактивировать текущий EVENT (чтоб использовать его для других вызовов) ,когда он уже передан периферийному классу - невозможно.
class TEVENTCREATE: protected TEVENT {
	public:
		TEVENTCREATE ();
		// три метода которыми управляющий класс инициализирует обьект события
		void setevent_cb (IEVCB *obj);			// управлЯющий класс наследован от интерфейса IEVCB, поэтому сюда передает свой this
		void setevent_code (uint32_t ev_cd);	// код eventa, значение этого кода актуально длЯ управлЯющего класса, ЯвлЯетсЯ индификатором eventa
		void setevent_param (uint32_t val);		// дополнительный параметр который потом передаетсЯ в метод events_cb
		
		// вспомогательные методы
		void activate ();						// активирует event, длЯ однократного вызыва
		bool is_progress ();					// активен ли event (). “правлЯющий класс может проверить поле f_event_progress. 
};





#endif
